"""
üî• SmashBuilder - Aplica√ß√£o CLI Principal üî•
Interface de linha de comando usando Typer
"""

import typer
from typing import List, Optional
from pathlib import Path
import json
import sys

from rich.console import Console
from rich.table import Table
from rich.panel import Panel

try:
    from calc.models import Build, Target, PRESET_TARGETS
    from calc.formulas import formula_engine
    from data_io.loader import data_loader
    from data_io.exporter import data_exporter
except ImportError:
    # Fallback para execu√ß√£o direta
    sys.path.append(str(Path(__file__).parent.parent))
    from calc.models import Build, Target, PRESET_TARGETS
    from calc.formulas import formula_engine
    from data_io.loader import data_loader
    from data_io.exporter import data_exporter

app = typer.Typer(
    name="smashbuilder",
    help="üî• SmashBuilder - Calculadora de Builds para League of Legends üî•"
)
console = Console()

@app.command()
def quick():
    """Calculadora r√°pida interativa"""
    console.print("üî• [bold cyan]SmashBuilder - Calculadora R√°pida[/bold cyan] üî•")
    console.print()

    # Carregar dados
    try:
        champions = data_loader.load_champions()
        items = data_loader.load_items()
        presets = data_loader.load_presets()
    except Exception as e:
        console.print(f"[red]Erro ao carregar dados: {e}[/red]")
        raise typer.Exit(1)

    # Sele√ß√£o de campe√£o
    console.print("[yellow]Campe√µes dispon√≠veis:[/yellow]")
    champion_list = list(champions.keys())
    for i, champ_name in enumerate(champion_list[:10], 1):  # Mostrar apenas os primeiros 10
        console.print(f"  {i}. {champions[champ_name].name}")

    if len(champion_list) > 10:
        console.print(f"  ... e mais {len(champion_list) - 10} campe√µes")

    champion_input = typer.prompt("\nDigite o nome do campe√£o")
    champion = data_loader.get_champion(champion_input)

    if not champion:
        console.print(f"[red]Campe√£o '{champion_input}' n√£o encontrado![/red]")
        raise typer.Exit(1)

    # N√≠vel
    level = typer.prompt("N√≠vel (1-18)", type=int, default=11)
    if not (1 <= level <= 18):
        console.print("[red]N√≠vel deve estar entre 1 e 18![/red]")
        raise typer.Exit(1)

    # Itens
    console.print("\n[yellow]Itens populares:[/yellow]")
    popular_items = ["infinity edge", "phantom dancer", "kraken slayer", "bloodthirster"]
    for item_name in popular_items:
        if item_name in items:
            console.print(f"  ‚Ä¢ {items[item_name].name}")

    items_input = typer.prompt("\nDigite os itens (separados por v√≠rgula)", default="")
    selected_items = []

    if items_input.strip():
        for item_name in items_input.split(","):
            item_name = item_name.strip()
            item = data_loader.get_item(item_name)
            if item:
                selected_items.append(item)
            else:
                console.print(f"[yellow]Item '{item_name}' n√£o encontrado, ignorando...[/yellow]")

    # Alvo
    console.print("\n[yellow]Alvos dispon√≠veis:[/yellow]")
    for target_key, target in presets["targets"].items():
        console.print(f"  ‚Ä¢ {target_key}: {target.name} (HP: {target.hp}, Armor: {target.armor})")

    target_input = typer.prompt("Selecione um alvo", default="fragile")
    target = presets["targets"].get(target_input.lower())

    if not target:
        console.print(f"[yellow]Alvo '{target_input}' n√£o encontrado, usando 'fragile'[/yellow]")
        target = presets["targets"]["fragile"]

    # Criar e calcular build
    build = Build(
        name=f"{champion.name} Level {level}",
        champion=champion,
        level=level,
        items=selected_items,
        target=target
    )

    console.print("\n[green]Calculando build...[/green]")

    try:
        final_stats = formula_engine.calculate_final_stats(build)
        build.final_stats = final_stats

        # Exibir resultados
        display_build_results(build)

        # Op√ß√£o de exportar
        export = typer.confirm("\nDeseja exportar os resultados?", default=False)
        if export:
            export_format = typer.prompt("Formato (json/csv/txt)", default="csv")

            if export_format.lower() == "json":
                filepath = data_exporter.export_build_to_json(build)
            elif export_format.lower() == "txt":
                filepath = data_exporter.create_build_report(build)
            else:
                filepath = data_exporter.export_build_to_csv(build)

            console.print(f"[green]Resultados exportados para: {filepath}[/green]")

    except Exception as e:
        console.print(f"[red]Erro ao calcular build: {e}[/red]")
        raise typer.Exit(1)

@app.command()
def build(
    champ: str = typer.Option(..., "--champ", "-c", help="Nome do campe√£o"),
    level: int = typer.Option(11, "--level", "-l", help="N√≠vel do campe√£o (1-18)"),
    items: str = typer.Option("", "--items", "-i", help="Itens separados por v√≠rgula"),
    target: str = typer.Option("fragile", "--target", "-t", help="Alvo para c√°lculo de DPS"),
    export_format: Optional[str] = typer.Option(None, "--export", "-e", help="Formato de export (json/csv/txt)")
):
    """Calcula uma build espec√≠fica"""

    try:
        # Carregar dados
        champion = data_loader.get_champion(champ)
        if not champion:
            console.print(f"[red]Campe√£o '{champ}' n√£o encontrado![/red]")
            raise typer.Exit(1)

        # Validar n√≠vel
        if not (1 <= level <= 18):
            console.print("[red]N√≠vel deve estar entre 1 e 18![/red]")
            raise typer.Exit(1)

        # Carregar itens
        selected_items = []
        if items.strip():
            for item_name in items.split(","):
                item_name = item_name.strip()
                item = data_loader.get_item(item_name)
                if item:
                    selected_items.append(item)
                else:
                    console.print(f"[yellow]Item '{item_name}' n√£o encontrado, ignorando...[/yellow]")

        # Carregar alvo
        presets = data_loader.load_presets()
        target_obj = presets["targets"].get(target.lower())
        if not target_obj:
            console.print(f"[yellow]Alvo '{target}' n√£o encontrado, usando 'fragile'[/yellow]")
            target_obj = presets["targets"]["fragile"]

        # Criar e calcular build
        build_obj = Build(
            name=f"{champion.name} Level {level}",
            champion=champion,
            level=level,
            items=selected_items,
            target=target_obj
        )

        final_stats = formula_engine.calculate_final_stats(build_obj)
        build_obj.final_stats = final_stats

        # Exibir resultados
        display_build_results(build_obj)

        # Exportar se solicitado
        if export_format:
            if export_format.lower() == "json":
                filepath = data_exporter.export_build_to_json(build_obj)
            elif export_format.lower() == "txt":
                filepath = data_exporter.create_build_report(build_obj)
            else:
                filepath = data_exporter.export_build_to_csv(build_obj)

            console.print(f"[green]Resultados exportados para: {filepath}[/green]")

    except Exception as e:
        console.print(f"[red]Erro: {e}[/red]")
        raise typer.Exit(1)

@app.command()
def compare(
    build_a: str = typer.Option(..., "--buildA", "-a", help="Arquivo JSON da primeira build"),
    build_b: str = typer.Option(..., "--buildB", "-b", help="Arquivo JSON da segunda build")
):
    """Compara duas builds"""
    console.print("üî• [bold cyan]Compara√ß√£o de Builds[/bold cyan] üî•")
    console.print(f"[yellow]Funcionalidade em desenvolvimento![/yellow]")
    console.print(f"Build A: {build_a}")
    console.print(f"Build B: {build_b}")

@app.command()
def table(
    champ: str = typer.Option(..., "--champ", "-c", help="Nome do campe√£o"),
    levels: str = typer.Option("1,6,11,16,18", "--levels", "-l", help="N√≠veis separados por v√≠rgula"),
    items: str = typer.Option("", "--items", "-i", help="Itens separados por v√≠rgula")
):
    """Exibe tabela de stats por n√≠vel"""
    console.print("üî• [bold cyan]Tabela por N√≠veis[/bold cyan] üî•")

    try:
        # Carregar campe√£o
        champion = data_loader.get_champion(champ)
        if not champion:
            console.print(f"[red]Campe√£o '{champ}' n√£o encontrado![/red]")
            raise typer.Exit(1)

        # Processar n√≠veis
        level_list = [int(l.strip()) for l in levels.split(",")]
        level_list = [l for l in level_list if 1 <= l <= 18]

        if not level_list:
            console.print("[red]Nenhum n√≠vel v√°lido fornecido![/red]")
            raise typer.Exit(1)

        # Carregar itens
        selected_items = []
        if items.strip():
            for item_name in items.split(","):
                item_name = item_name.strip()
                item = data_loader.get_item(item_name)
                if item:
                    selected_items.append(item)

        # Criar tabela
        table = Table(title=f"üìä {champion.name} - Stats por N√≠vel")
        table.add_column("N√≠vel", style="cyan")
        table.add_column("AD", style="red")
        table.add_column("AS", style="yellow")
        table.add_column("HP", style="green")
        table.add_column("Armor", style="blue")
        table.add_column("MR", style="magenta")

        for level in sorted(level_list):
            # Calcular stats para este n√≠vel
            build_obj = Build(
                name=f"{champion.name} Level {level}",
                champion=champion,
                level=level,
                items=selected_items
            )

            final_stats = formula_engine.calculate_final_stats(build_obj)

            table.add_row(
                str(level),
                f"{final_stats.ad:.1f}",
                f"{final_stats.as_:.2f}",
                f"{final_stats.hp:.0f}",
                f"{final_stats.armor:.1f}",
                f"{final_stats.mr:.1f}"
            )

        console.print(table)

    except Exception as e:
        console.print(f"[red]Erro: {e}[/red]")
        raise typer.Exit(1)

@app.command()
def champions():
    """Lista todos os campe√µes dispon√≠veis"""
    try:
        champions = data_loader.load_champions()

        table = Table(title="üìã Campe√µes Dispon√≠veis")
        table.add_column("Nome", style="cyan")
        table.add_column("Classe", style="yellow")
        table.add_column("AD Base", style="red")
        table.add_column("AS Base", style="green")
        table.add_column("HP Base", style="blue")

        for champion in sorted(champions.values(), key=lambda c: c.name):
            table.add_row(
                champion.name,
                champion.champion_class,
                f"{champion.base_ad:.0f}",
                f"{champion.base_as:.3f}",
                f"{champion.base_hp:.0f}"
            )

        console.print(table)
        console.print(f"\n[green]Total: {len(champions)} campe√µes[/green]")

    except Exception as e:
        console.print(f"[red]Erro ao carregar campe√µes: {e}[/red]")
        raise typer.Exit(1)

@app.command()
def items():
    """Lista todos os itens dispon√≠veis"""
    try:
        items = data_loader.load_items()

        table = Table(title="üõ°Ô∏è Itens Dispon√≠veis")
        table.add_column("Nome", style="cyan")
        table.add_column("Custo", style="yellow")
        table.add_column("M√≠tico", style="red")
        table.add_column("√önico", style="green")

        for item in sorted(items.values(), key=lambda i: i.cost, reverse=True):
            table.add_row(
                item.name,
                f"{item.cost}g",
                "‚úì" if item.mythic else "‚úó",
                "‚úì" if item.unique else "‚úó"
            )

        console.print(table)
        console.print(f"\n[green]Total: {len(items)} itens[/green]")

    except Exception as e:
        console.print(f"[red]Erro ao carregar itens: {e}[/red]")
        raise typer.Exit(1)

def display_build_results(build: Build):
    """Exibe os resultados de uma build"""
    if not build.final_stats:
        console.print("[red]Nenhum resultado calculado![/red]")
        return

    # Informa√ß√µes da build
    panel_content = f"""
[bold cyan]Campe√£o:[/bold cyan] {build.champion.name}
[bold cyan]N√≠vel:[/bold cyan] {build.level}
[bold cyan]Itens:[/bold cyan] {len(build.items)} itens
[bold cyan]Custo Total:[/bold cyan] {sum(item.cost for item in build.items)}g
    """

    console.print(Panel(panel_content, title="üìã Informa√ß√µes da Build", border_style="cyan"))

    # Tabela de stats
    stats_table = Table(title="üìä Estat√≠sticas Finais")
    stats_table.add_column("Atributo", style="yellow")
    stats_table.add_column("Valor", style="green")

    stats = build.final_stats
    stats_table.add_row("Attack Damage", f"{stats.ad:.1f}")
    stats_table.add_row("Ability Power", f"{stats.ap:.1f}")
    stats_table.add_row("Attack Speed", f"{stats.as_:.2f}")
    stats_table.add_row("Critical Chance", f"{stats.crit_chance:.1f}%")
    stats_table.add_row("Health", f"{stats.hp:.0f}")
    stats_table.add_row("Armor", f"{stats.armor:.1f}")
    stats_table.add_row("Magic Resistance", f"{stats.mr:.1f}")
    stats_table.add_row("Movement Speed", f"{stats.ms:.0f}")

    console.print(stats_table)

    # An√°lise de combate
    if stats.dps and build.target:
        combat_table = Table(title="‚öîÔ∏è An√°lise de Combate")
        combat_table.add_column("M√©trica", style="yellow")
        combat_table.add_column("Valor", style="red")

        combat_table.add_row("Alvo", build.target.name)
        combat_table.add_row("DPS", f"{stats.dps:.1f}")
        if stats.ttk:
            combat_table.add_row("Time to Kill", f"{stats.ttk:.1f}s")
        if stats.effective_hp_physical:
            combat_table.add_row("HP Efetivo (F√≠sico)", f"{stats.effective_hp_physical:.0f}")

        console.print(combat_table)

if __name__ == "__main__":
    app()
